#!/usr/bin/env python3
# This first line with #! ("shebang") tells the system that this is a script
# Note that this file has been marked as "executable" for the OS using the command "chmod +x"
import argparse
from html import parser
import logging
import os
import sys
from typing import Any
from pathlib import Path

from dsba.data_ingestion import load_csv_from_path, write_csv_to_path
from dsba.model_registry import list_models_ids, load_model, load_model_metadata
from dsba.model_prediction import classify_dataframe
from dsba.preprocessing import preprocess_dataframe

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%H:%M:%S,",
)


def create_parser():
    """
    We use the library argparse to define the functionalities of our CLI,
    it will also do the magic to turn the command line typed by the user into an easy to use python object.

    We want to define a commend line that does
    dsba_cli [command] [options]
    """
    parser = argparse.ArgumentParser(description="DSBA Plaftorm CLI Tool")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # List models command (it has no additional parameters)
    subparsers.add_parser("list", help="List available models")

    # Predict command (it requires a model name, an input file and an output file)
    predict_parser = subparsers.add_parser("predict", help="Make predictions")
    predict_parser.add_argument("--model", help="Model name to use", required=True)
    predict_parser.add_argument("--input", help="Input file path", required=True)
    predict_parser.add_argument("--output", help="Output file path", required=True)

    # Preprocessing command
    preprocess_parser = subparsers.add_parser("preprocess data", help = "Encode categorical data")
    preprocess_parser.add_argument("--dataset", help = "Dataset to preprocess", required = True)
    preprocess_parser.add_argument("--output", help = "Output file path", required = True)

    return parser


def get_script_args():
    parser = create_parser()
    return parser.parse_args()


def main():
    args = get_script_args()
    if args.command == "list":
        list_models()
    elif args.command == "predict":
        predict(args.model, args.input, args.output)


# We create a few light wrappers around our platform functionalities, just collect inputs and print the results.


def list_models() -> None:
    models = list_models_ids()
    print("Available models:")
    for model in models:
        print(f"- {model}")


def predict(model_id: str, input_file: str, output_file: str) -> None:
    model = load_model(model_id)
    metadata = load_model_metadata(model_id)
    df = load_csv_from_path(input_file)
    predictions = classify_dataframe(model, df, metadata.target_column)
    write_csv_to_path(predictions, output_file)
    print(f"Scored {len(predictions)} records")

def preprocess(df: str, output_file: str) -> None:
    df_encoded = preprocess_dataframe(df)
    write_csv_to_path(df_encoded, output_file)
    print(f"The preprocessed file has been saved to r{output_file}")


if __name__ == "__main__":
    main()
