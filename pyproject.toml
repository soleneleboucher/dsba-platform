[project]
name = "adclick"
version = "0.1.0"
description = "An MLOps Platform for adclick prediction"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [{ name = "Auriane, Emma, Elrich, SolÃ¨ne", email = "solene.leboucher@gmail.com"}]


dependencies = [
    "fastapi>=0.115.7",
    "matplotlib>=3.10.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pydantic>=2.0.0",
    "requests>=2.32.3",
    "seaborn>=0.13.2",
    "scikit-learn>=1.3.0",
    "sqlalchemy>=2.0.37",
    "uvicorn>=0.34.0",
    "xgboost>=2.1.3",
    "imbalanced-learn>=0.12",
    "lightgbm>=3.0.0", 
    "optuna>=3.0.0", 
]


[build-system]
# The build system is a tool that is used to package your project.
# Don't worry too much about this part.
# FYI, we are using hatchling, but other good options exists
# A common one is setup tools, it uses by convention a "setup.py" file
# It's fine to use it but it's arguably getting old
# Hatch (+hatchling which is part of the project Hatch), Poetry, PDM are popular and modern 
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.wheel]
packages = ["src"]
# -------------------------------------------------------------------------------------


# Additional libaries to help with coding
# What is below is not part of the "useful code" to provide functionalities
# It is simply used to help with development, testing, formatting code, etc.


[project.optional-dependencies]
# Dev dependencies are the libraries that are only needed when you are coding
# In theory you could just "pip install" them and add them to normal dependencies
# But it is recommended to separate them here, so they are managed separately and not shipped with the package

dev = [
    # Pytest is a standard library for unit testing code
    # A unit test is a a function that calls a small of your code and then verifies (we usually use the word "assert") 
    # that the result is as expected 
    # testing is a essential part of professional software development
    # It ensures that the code is doing what you expects but it also makes it safe to modify existing code
    # since introducing new bugs has good chances to be detected if the tests are exahstive and well designed
    "pytest>=7.0.0",

    # Ruff is a popular library for formatting and linting code
    # Formatting is about purely stylistic issues, like indentation, line length, etc.
    # We strongly advise to discuss these matters as little as possible, just use ruff with the default settings
    # And it will make the code of your whole team more readable and standardized
    # Popular alternatives include Black formatter. But ruff is more modern and much faster.
    # Ruff also has a linter, which is a tool that checks for common mistakes and helps you write better code
    # Older alternatives include Flake8 and Pylint
    "ruff>=0.1.0",

    # Mypy is a static type checker for Python
    # In Python, typing is dynamic which means that variables can have different types depening on the context when the code is executed
    # It is powerful but can make code much harder to understand and maintain and can very easily introduce bugs
    # In production code, it is recommended to annotate types as much as possible.
    # It will still not be enfored by the python during execution but MyPy can analyse types and detect inconsistencies and mistakes
    # before you run the code.
    "mypy>=1.0.0",
]


# Additional parameters for the dev dependencies:

[tool.pytest.ini_options]
testpaths = ["tests"] # tests are stored in the "tests" folder
python_files = [
    "test_*.py",
] # only try to run test from files that match this pattern

[tool.ruff]
target-version = "py312"
# 88 is a very common convention for maximum line length so that the code is readable
line-length = 88

# Ruff provides many standard rules that you may want to enforce in your code
# Ruff documentation explains all the categories of rules and each rules
# you can select or excluse the rules your want to customize your coding style
# It is advised to use the default settings since adopting the most common conventions is likely to optimize collaboration
select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF"]
exclude = []

[tool.mypy]
python_version = "3.12"
strict = true

